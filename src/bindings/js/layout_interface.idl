[Prefix="libsbml::"]
interface Dimensions {
  double getWidth();
  double getHeight();
  double getDepth();
};

[Prefix="libsbml::"]
interface Point {
  DOMString getId();
  void setId(DOMString t);
  boolean isSetId();

  void setX(double x);
  void setY(double y);
  void setZ(double z);
  void setXOffset(double x);
  void setYOffset(double y);
  void setZOffset(double z);

  double x();
  double y();
  double z();
  double getXOffset();
  double getYOffset();
  double getZOffset();
};

[Prefix="libsbml::"]
interface BoundingBox {
  DOMString getId();
  void setId(DOMString t);
  boolean isSetId();

  Dimensions getDimensions();
  void setDimensions(Dimensions b);

  Point getPosition();
  void setPosition(Point b);

  void setX(double x);
  void setY(double y);
  void setZ(double z);

  double x();
  double y();
  double z();
};

[Prefix="libsbml::"]
interface GraphicalObject {
  DOMString getId();
  void setId(DOMString t);
  boolean isSetId();
};

[Prefix="libsbml::"]
interface CompartmentGlyph {
  DOMString getId();
  void setId(DOMString t);
  boolean isSetId();
};

[Prefix="libsbml::"]
interface CubicBezier {
  DOMString getId();
  void setId(DOMString t);
  boolean isSetId();
};

[Prefix="libsbml::"]
interface GeneralGlyph {
  DOMString getId();
  void setId(DOMString t);
  boolean isSetId();
};

[Prefix="libsbml::"]
interface LineSegment {
  DOMString getId();
  void setId(DOMString t);
  boolean isSetId();
};

[Prefix="libsbml::"]
interface ReactionGlyph {
  DOMString getId();
  void setId(DOMString t);
  boolean isSetId();
};

[Prefix="libsbml::"]
interface SpeciesGlyph {
  BoundingBox getBoundingBox();
  void setBoundingBox(BoundingBox b);

  DOMString getId();
  void setId(DOMString t);
  boolean isSetId();

  DOMString getSpeciesId();
  void setSpeciesId(DOMString t);
  boolean isSetSpeciesId();
};

[Prefix="libsbml::"]
interface Curve {
  CubicBezier createCubicBezier();
  LineSegment createLineSegment();

  unsigned long getNumCurveSegments();
  LineSegment getCurveSegment(unsigned long n);
};

[Prefix="libsbml::"]
interface SpeciesReferenceGlyph {
  BoundingBox getBoundingBox();
  void setBoundingBox(BoundingBox b);

  CubicBezier createCubicBezier();
  LineSegment createLineSegment();

  Curve getCurve();
};

[Prefix="libsbml::"]
interface TextGlyph {
  BoundingBox getBoundingBox();
  void setBoundingBox(BoundingBox b);

  DOMString getText();
  void setText(DOMString t);
  boolean isSetText();
};

[Prefix="libsbml::"]
interface Layout {
  GraphicalObject createAdditionalGraphicalObject();
  CompartmentGlyph createCompartmentGlyph();
  CubicBezier createCubicBezier();
  GeneralGlyph createGeneralGlyph();
  LineSegment createLineSegment();
  ReactionGlyph createReactionGlyph();
  SpeciesGlyph createSpeciesGlyph();
  SpeciesReferenceGlyph createSpeciesReferenceGlyph();
  TextGlyph createTextGlyph();

  unsigned long getNumAdditionalGraphicalObjects();
  unsigned long getNumCompartmentGlyphs();
  unsigned long getNumGeneralGlyphs();
  unsigned long getNumReactionGlyphs();
  unsigned long getNumSpeciesGlyphs();
  unsigned long getNumTextGlyphs();

  GraphicalObject getAdditionalGraphicalObject(unsigned long n);
  CompartmentGlyph getCompartmentGlyph(unsigned long n);
  GeneralGlyph getGeneralGlyph(unsigned long n);
  ReactionGlyph getReactionGlyph(unsigned long n);
  SpeciesGlyph getSpeciesGlyph(unsigned long n);
  TextGlyph getTextGlyph(unsigned long n);

  GraphicalObject removeAdditionalGraphicalObject(unsigned long n);
  CompartmentGlyph removeCompartmentGlyph(unsigned long n);
  ReactionGlyph removeReactionGlyph(unsigned long n);
  SpeciesGlyph removeSpeciesGlyph(unsigned long n);
  SpeciesReferenceGlyph removeSpeciesReferenceGlyph(DOMString id);
  TextGlyph removeTextGlyph(unsigned long n);
};

[Prefix="libsbml::"]
interface LayoutModelPlugin {
  Layout createLayout();

  // NOTE: libSBML signedness is inconsistent here
  long getNumLayouts();
  Layout getLayout(unsigned long n);
};

[Prefix="libsbmljs::"]
interface LayoutCaster {
  void LayoutCaster();
  LayoutModelPlugin castToLayoutPlugin(SBasePlugin p);
};