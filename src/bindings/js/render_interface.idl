[Prefix="libsbml::"]
interface RelAbsVector {
  void RelAbsVector(double a, double r);

  void setCoordinate(double a, double r);

  void setAbsoluteValue(double abs);
  void setRelativeValue(double rel);

  double getAbsoluteValue();
  double getRelativeValue();
};

[Prefix="libsbml::"]
interface GradientStop {
  DOMString getId();
  void setId(DOMString t);
  boolean isSetId();

  [Ref] RelAbsVector getOffset();
  void setOffset(double abs, double rel);

  DOMString getStopColor();
  void setStopColor(DOMString color);
};

[Prefix="libsbml::"]
interface GradientBase {
  DOMString getId();
  void setId(DOMString t);
  boolean isSetId();

  unsigned long getNumGradientStops();
  GradientStop getGradientStop(unsigned long n);
  GradientStop createGradientStop();
};

[Prefix="libsbml::"]
interface LinearGradient {
  DOMString getId();
  void setId(DOMString t);
  boolean isSetId();

  void setCoordinates([Ref] RelAbsVector x1, [Ref] RelAbsVector y1, [Ref] RelAbsVector x2, [Ref] RelAbsVector y2);
  void setPoint1([Ref] RelAbsVector x, [Ref] RelAbsVector y, [Ref] RelAbsVector z);
  void setPoint2([Ref] RelAbsVector x, [Ref] RelAbsVector y, [Ref] RelAbsVector z);

  [Ref] RelAbsVector getXPoint1();
  [Ref] RelAbsVector getYPoint1();
  [Ref] RelAbsVector getZPoint1();

  [Ref] RelAbsVector getXPoint2();
  [Ref] RelAbsVector getYPoint2();
  [Ref] RelAbsVector getZPoint2();

  unsigned long getNumGradientStops();
  GradientStop getGradientStop(unsigned long n);
  GradientStop createGradientStop();
};

[Prefix="libsbml::"]
interface RadialGradient {
  DOMString getId();
  void setId(DOMString t);
  boolean isSetId();

  unsigned long getNumGradientStops();
  GradientStop getGradientStop(unsigned long n);
  GradientStop createGradientStop();
};

[Prefix="libsbmljs::"]
interface GradientCaster {
  void GradientCaster();

  boolean isLinear(GradientBase p);
  LinearGradient asLinear(GradientBase p);

  boolean isRadial(GradientBase p);
  RadialGradient asRadial(GradientBase p);
};

[Prefix="libsbml::"]
interface ColorDefinition {
  DOMString getId();
  void setId(DOMString t);
  boolean isSetId();

  DOMString createValueString(); // NOTE: may leak (returns rvalue)
  boolean setColorValue(DOMString val);
  void setRGBA(unsigned long r, unsigned long g, unsigned long b, unsigned long a);

  void setRed(unsigned long val);
  void setGreen(unsigned long val);
  void setBlue(unsigned long val);
  void setAlpha(unsigned long val);

  unsigned long getRed();
  unsigned long getGreen();
  unsigned long getBlue();
  unsigned long getAlpha();
};

[Prefix="libsbml::"]
interface GlobalRenderInformation {
  DOMString getId();
  void setId(DOMString t);
  boolean isSetId();

  DOMString getName();
  void setName(DOMString t);
  boolean isSetName();

  DOMString getProgramVersion();
  void setProgramVersion(DOMString t);

  DOMString getBackgroundColor();
  void setBackgroundColor(DOMString t);

  unsigned long getNumColorDefinitions();
  ColorDefinition getColorDefinition(unsigned long n);

  unsigned long getNumGradientDefinitions();
  GradientBase getGradientDefinition(unsigned long n);
};

[Prefix="libsbml::"]
interface RenderListOfLayoutsPlugin {
  unsigned long getNumGlobalRenderInformationObjects();
  GlobalRenderInformation getRenderInformation(unsigned long n);
};

[Prefix="libsbml::"]
interface LocalRenderInformation {
  DOMString getId();
  void setId(DOMString t);
  boolean isSetId();

  DOMString getName();
  void setName(DOMString t);
  boolean isSetName();

  DOMString getProgramVersion();
  void setProgramVersion(DOMString t);

  DOMString getBackgroundColor();
  void setBackgroundColor(DOMString t);

  unsigned long getNumColorDefinitions();
  ColorDefinition getColorDefinition(unsigned long n);

  unsigned long getNumGradientDefinitions();
  GradientBase getGradientDefinition(unsigned long n);
};

[Prefix="libsbml::"]
interface RenderLayoutPlugin {
  unsigned long getNumLocalRenderInformationObjects();
  LocalRenderInformation getRenderInformation(unsigned long n);
};

[Prefix="libsbmljs::"]
interface RenderCaster {
  void RenderCaster();
  RenderListOfLayoutsPlugin castToRenderListOfLayoutsPlugin(SBasePlugin p);
  RenderLayoutPlugin castToRenderLayoutPlugin(SBasePlugin p);
};
