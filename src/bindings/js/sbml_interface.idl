[Prefix="libsbml::"]
interface SpeciesReference {
  DOMString getId();
  boolean setId(DOMString id);

  // TODO: doc
  DOMString getMetaId();
  long setMetaId(DOMString id);

  // TODO: doc
  long getSBOTerm();
  long setSBOTerm(long value);
  boolean isSetSBOTerm();

  DOMString getSpecies();
  long setSpecies(DOMString spec);

  // TODO: doc
  [Const] Model getModel();
};

[Prefix="libsbml::"]
interface ModifierSpeciesReference {
  DOMString getId();
  boolean setId(DOMString id);

  // TODO: doc
  DOMString getMetaId();
  long setMetaId(DOMString id);

  // TODO: doc
  long getSBOTerm();
  long setSBOTerm(long value);
  boolean isSetSBOTerm();

  DOMString getSpecies();
  long setSpecies(DOMString spec);

  // TODO: doc
  [Const] Model getModel();
};

[Prefix="libsbml::"]
interface Species {
  DOMString getId();
  boolean setId(DOMString id);

  // TODO: doc
  DOMString getMetaId();
  long setMetaId(DOMString id);

  DOMString getName();
  long setName(DOMString name);

  double getInitialAmount();
  long setInitialAmount(double amt);
  boolean isSetInitialAmount();

  double getInitialConcentration();
  long setInitialConcentration(double conc);
  boolean isSetInitialConcentration();

  boolean getHasOnlySubstanceUnits();
  long setHasOnlySubstanceUnits(boolean val);
  boolean isSetHasOnlySubstanceUnits();

  // TODO: doc
  DOMString getCompartment();
  long setCompartment(DOMString comp);
  boolean isSetCompartment();

  // TODO: doc
  DOMString getUnits();
  long setUnits(DOMString units);
  boolean isSetUnits();

  // TODO: doc
  long getSBOTerm();
  long setSBOTerm(long value);
  boolean isSetSBOTerm();
};

enum libsbml__idl__ASTNodeType_t {
    "libsbml::AST_PLUS"
  , "libsbml::AST_MINUS"
  , "libsbml::AST_TIMES"
  , "libsbml::AST_DIVIDE"
  , "libsbml::AST_POWER"

  , "libsbml::AST_INTEGER"
  , "libsbml::AST_REAL"
  , "libsbml::AST_REAL_E"
  , "libsbml::AST_RATIONAL"

  , "libsbml::AST_NAME"
  , "libsbml::AST_NAME_AVOGADRO"
  , "libsbml::AST_NAME_TIME"

  , "libsbml::AST_CONSTANT_E"
  , "libsbml::AST_CONSTANT_FALSE"
  , "libsbml::AST_CONSTANT_PI"
  , "libsbml::AST_CONSTANT_TRUE"

  , "libsbml::AST_LAMBDA"

  , "libsbml::AST_FUNCTION"
  , "libsbml::AST_FUNCTION_ABS"
  , "libsbml::AST_FUNCTION_ARCCOS"
  , "libsbml::AST_FUNCTION_ARCCOSH"
  , "libsbml::AST_FUNCTION_ARCCOT"
  , "libsbml::AST_FUNCTION_ARCCOTH"
  , "libsbml::AST_FUNCTION_ARCCSC"
  , "libsbml::AST_FUNCTION_ARCCSCH"
  , "libsbml::AST_FUNCTION_ARCSEC"
  , "libsbml::AST_FUNCTION_ARCSECH"
  , "libsbml::AST_FUNCTION_ARCSIN"
  , "libsbml::AST_FUNCTION_ARCSINH"
  , "libsbml::AST_FUNCTION_ARCTAN"
  , "libsbml::AST_FUNCTION_ARCTANH"
  , "libsbml::AST_FUNCTION_CEILING"
  , "libsbml::AST_FUNCTION_COS"
  , "libsbml::AST_FUNCTION_COSH"
  , "libsbml::AST_FUNCTION_COT"
  , "libsbml::AST_FUNCTION_COTH"
  , "libsbml::AST_FUNCTION_CSC"
  , "libsbml::AST_FUNCTION_CSCH"
  , "libsbml::AST_FUNCTION_DELAY"
  , "libsbml::AST_FUNCTION_EXP"
  , "libsbml::AST_FUNCTION_FACTORIAL"
  , "libsbml::AST_FUNCTION_FLOOR"
  , "libsbml::AST_FUNCTION_LN"
  , "libsbml::AST_FUNCTION_LOG"
  , "libsbml::AST_FUNCTION_PIECEWISE"
  , "libsbml::AST_FUNCTION_POWER"
  , "libsbml::AST_FUNCTION_ROOT"
  , "libsbml::AST_FUNCTION_SEC"
  , "libsbml::AST_FUNCTION_SECH"
  , "libsbml::AST_FUNCTION_SIN"
  , "libsbml::AST_FUNCTION_SINH"
  , "libsbml::AST_FUNCTION_TAN"
  , "libsbml::AST_FUNCTION_TANH"

  , "libsbml::AST_LOGICAL_AND"
  , "libsbml::AST_LOGICAL_NOT"
  , "libsbml::AST_LOGICAL_OR"
  , "libsbml::AST_LOGICAL_XOR"

  , "libsbml::AST_RELATIONAL_EQ"
  , "libsbml::AST_RELATIONAL_GEQ"
  , "libsbml::AST_RELATIONAL_GT"
  , "libsbml::AST_RELATIONAL_LEQ"
  , "libsbml::AST_RELATIONAL_LT"
  , "libsbml::AST_RELATIONAL_NEQ"

  , "libsbml::AST_QUALIFIER_BVAR"
  , "libsbml::AST_QUALIFIER_LOGBASE"
  , "libsbml::AST_QUALIFIER_DEGREE"

  , "libsbml::AST_SEMANTICS"

  , "libsbml::AST_CONSTRUCTOR_PIECE"
  , "libsbml::AST_CONSTRUCTOR_OTHERWISE"

  , "libsbml::AST_UNKNOWN"
  , "libsbml::AST_ORIGINATES_IN_PACKAGE"
};

[Prefix="libsbml::"]
interface ASTNode {
  long getNumChildren();
  ASTNode getChild(long i);

  libsbml__idl__ASTNodeType_t getType();

  boolean isSetUnits();
  DOMString getUnits();
  long setUnits(DOMString units);

  // TODO: doc
  ByteString getName();
  long setName(ByteString name);
};

// TODO: doc
[Prefix="libsbml::"]
interface Parameter {
  DOMString getId();
  boolean setId(DOMString id);

  DOMString getName();
  long setName(DOMString name);
  boolean isSetName();

  double getValue();
  long setValue(double value);
  boolean isSetValue();

  boolean isSetUnits();
  DOMString getUnits();
  long setUnits(DOMString units);
};

// TODO: doc
[Prefix="libsbml::"]
interface LocalParameter {
  DOMString getId();
  boolean setId(DOMString id);

  DOMString getName();
  long setName(DOMString name);
  boolean isSetName();

  double getValue();
  long setValue(double value);
  boolean isSetValue();

  boolean isSetUnits();
  DOMString getUnits();
  long setUnits(DOMString units);
};

[Prefix="libsbml::"]
interface KineticLaw {
  [Const] ASTNode getMath();
  long setMath(ASTNode math);
  boolean isSetMath();

  // TODO: doc
  DOMString getMetaId();
  long setMetaId(DOMString id);

  // TODO: doc
  unsigned long getNumLocalParameters();
  LocalParameter createLocalParameter();
  LocalParameter getLocalParameter(unsigned long i);

  // TODO: doc
  unsigned long getNumParameters();
  Parameter createParameter();
  Parameter getParameter(unsigned long i);

  // TODO: doc
  DOMString getFormula();
  long setFormula(DOMString formula);
};

[Prefix="libsbml::"]
interface SBMLFormulaParser {
  void SBMLFormulaParser();
  ASTNode parseL3Formula(DOMString formula);
  ASTNode parseFormula(DOMString formula);
};

[Prefix="libsbml::"]
interface Reaction {
  DOMString getId();
  long setId(DOMString id);

  // TODO: doc
  DOMString getMetaId();
  long setMetaId(DOMString id);

  // TODO: doc
  DOMString getName();
  long setName(DOMString name);

  long getNumReactants();
  long getNumProducts();
  long getNumModifiers();

  SpeciesReference getReactant(long i);
  SpeciesReference getProduct(long i);
  ModifierSpeciesReference getModifier(long i);

  long addReactant(SpeciesReference sr);
  long addProduct(SpeciesReference sr);

  SpeciesReference createReactant();
  SpeciesReference createProduct();
  ModifierSpeciesReference createModifier();

  KineticLaw createKineticLaw();
  KineticLaw getKineticLaw();

  // TODO: doc
  boolean getReversible();
  long setReversible(boolean value);
  boolean isSetReversible();

  // TODO: doc
  long getSBOTerm();
  long setSBOTerm(long value);
  boolean isSetSBOTerm();
};

[Prefix="libsbml::"]
interface Compartment {
  DOMString getId();
  long setId(DOMString id);

  // TODO: doc
  DOMString getMetaId();
  long setMetaId(DOMString id);

  double getSize();
  long setSize(double val);
  boolean isSetSize();

  double getVolume();
  long setVolume(double val);

  DOMString getUnits();
  long setUnits(DOMString units);
  // TODO: doc
  boolean isSetUnits();

  // TODO: doc
  long getSBOTerm();
  long setSBOTerm(long value);
  boolean isSetSBOTerm();
};

[Prefix="libsbml::"]
interface Rule {
  // TODO: doc
  boolean isRate();
  boolean isAssignment();
  boolean isAlgebraic();

  // TODO: doc
  DOMString getMetaId();
  long setMetaId(DOMString id);
  boolean isSetMetaId();

  // TODO: doc
  long getSBOTerm();
  long setSBOTerm(long value);
  boolean isSetSBOTerm();

  // TODO: doc
  DOMString getFormula();
  long setFormula(DOMString formula);

  // TODO: doc
  boolean isParameter();
};

[Prefix="libsbml::"]
interface AssignmentRule {
  // TODO: doc
  DOMString getMetaId();
  long setMetaId(DOMString id);
  boolean isSetMetaId();

  // TODO: doc
  long getSBOTerm();
  long setSBOTerm(long value);
  boolean isSetSBOTerm();

  // TODO: doc
  DOMString getVariable();
  long setVariable(DOMString id);
  boolean isSetVariable();

  // TODO: doc
  [Const] ASTNode getMath();
  long setMath(ASTNode math);
  boolean isSetMath();

  // TODO: doc
  DOMString getFormula();
  long setFormula(DOMString formula);

  // TODO: doc
  boolean isParameter();
};

[Prefix="libsbml::"]
interface RateRule {
  // TODO: doc
  DOMString getMetaId();
  long setMetaId(DOMString id);
  boolean isSetMetaId();

  // TODO: doc
  long getSBOTerm();
  long setSBOTerm(long value);
  boolean isSetSBOTerm();

  // TODO: doc
  DOMString getFormula();
  long setFormula(DOMString formula);

  // TODO: doc
  [Const] ASTNode getMath();
  long setMath(ASTNode math);
  boolean isSetMath();

  // TODO: doc
  boolean isParameter();
};

[Prefix="libsbml::"]
interface AlgebraicRule {
  // TODO: doc
  DOMString getMetaId();
  long setMetaId(DOMString id);
  boolean isSetMetaId();

  // TODO: doc
  long getSBOTerm();
  long setSBOTerm(long value);
  boolean isSetSBOTerm();

  // TODO: doc
  DOMString getFormula();
  long setFormula(DOMString formula);

  // TODO: doc
  [Const] ASTNode getMath();
  long setMath(ASTNode math);
  boolean isSetMath();

  // TODO: doc
  boolean isParameter();
};

[Prefix="libsbmljs::"]
interface RuleSwitch {
  void RuleSwitch();

  AssignmentRule castToAssignmentRule(Rule r);
  RateRule castToRateRule(Rule r);
  AlgebraicRule castToAlgebraicRule(Rule r);
};

[Prefix="libsbml::"]
interface Model {
  DOMString getId();
  long setId(DOMString id);

  // TODO: doc
  DOMString getMetaId();
  long setMetaId(DOMString id);
  boolean isSetMetaId();

  unsigned long getNumReactions();
  Reaction getReaction(unsigned long i);
  Reaction createReaction();

  unsigned long getNumSpecies();
  Species createSpecies();
  Species getSpecies(unsigned long i);
  // TODO: doc
  Species removeSpecies(unsigned long i);

  unsigned long getNumCompartments();
  Compartment getCompartment(unsigned long i);
  Compartment createCompartment();

  // TODO: doc
  unsigned long getNumParameters();
  Parameter createParameter();
  Parameter getParameter(unsigned long i);

  // TODO: doc
  unsigned long getNumRules();
  Rule getRule(unsigned long i);

  // TODO: doc
  unsigned long getVersion();

  // TODO: doc
  long setAnnotation(DOMString str);

  // TODO: doc
  unsigned long getNumPlugins();
  SBasePlugin getPlugin(unsigned long n);
//   SBasePlugin getPlugin(DOMString name);
};

[Prefix="libsbml::"]
interface SBMLError {
  DOMString getMessage();
};

[Prefix="libsbml::"]
interface SBMLErrorLog {
// reserved word apparently. whoop-de-doo
//   DOMString toString();
};

[Prefix="libsbml::"]
interface SBasePlugin {
  // TODO: doc
  DOMString getPackageName();

  // TODO: doc
  DOMString getPrefix();

  // TODO: doc
  DOMString getURI();
  unsigned long getVersion();
  unsigned long getLevel();
};

[Prefix="libsbml::"]
interface SBMLDocument {
  // ctor
  void SBMLDocument(long level, long version);

  // model
  Model getModel();
  Model createModel();

  // errors
  unsigned long getNumErrors();
  [Const] SBMLError getError(unsigned long n);
  SBMLErrorLog getErrorLog();

  // level / version
  unsigned long getVersion();
  unsigned long getLevel();

  // plugins / packages
  // TODO: doc
  unsigned long getNumPlugins();
  SBasePlugin getPlugin(unsigned long n);

  boolean enablePackage(DOMString pkgName, DOMString pkgPrefix, boolean flag);
  boolean disablePackage(DOMString pkgName, DOMString pkgPrefix);
  boolean isPackageEnabled(DOMString pkgName);
  long setPackageRequired(DOMString pkgName, boolean flag);

  // validation
  // TODO: doc
  unsigned long checkConsistency();
  unsigned long checkInternalConsistency();
  unsigned long validateSBML();

  // compatibility checking
  // TODO: doc
  unsigned long checkL1Compatibility();
  unsigned long checkL2v1Compatibility();
  unsigned long checkL2v2Compatibility();
  unsigned long checkL2v3Compatibility();
  unsigned long checkL2v4Compatibility();
  unsigned long checkL3v1Compatibility();

};

[Prefix="libsbml::"]
interface SBMLReader {
  void SBMLReader();
  SBMLDocument readSBMLFromString(DOMString sbmlstr);
};

// different name req'd b/c libsbml version did not have consistent usage of types
[Prefix="libsbml::"]
interface SBMLWriter {
  void SBMLWriter();
//   DOMString writeSBMLToString(SBMLDocument doc);
  // BUG: memory may not be freed
  ByteString writeSBMLToString(SBMLDocument doc);
};

[Prefix="libsbmljs::"]
interface Capabilities {
  void Capabilities();
  boolean isLayoutSupported();
  boolean isRenderSupported();
};[Prefix="libsbml::"]
interface Dimensions {
  void Dimensions(LayoutPkgNamespaces ns, double w, double h, double d);

  void setWidth(double val);
  void setHeight(double val);
  void setDepth(double val);

  double getWidth();
  double getHeight();
  double getDepth();
};

[Prefix="libsbml::"]
interface Point {
  DOMString getId();
  void setId(DOMString t);
  boolean isSetId();

  void setX(double x);
  void setY(double y);
  void setZ(double z);
  void setXOffset(double x);
  void setYOffset(double y);
  void setZOffset(double z);

  double x();
  double y();
  double z();
  double getXOffset();
  double getYOffset();
  double getZOffset();
};

[Prefix="libsbml::"]
interface BoundingBox {
  DOMString getId();
  void setId(DOMString t);
  boolean isSetId();

  Dimensions getDimensions();
  void setDimensions(Dimensions b);

  Point getPosition();
  void setPosition(Point b);

  void setX(double x);
  void setY(double y);
  void setZ(double z);

  double x();
  double y();
  double z();
};

[Prefix="libsbml::"]
interface GraphicalObject {
  DOMString getId();
  void setId(DOMString t);
  boolean isSetId();
};

[Prefix="libsbml::"]
interface CompartmentGlyph {
  DOMString getId();
  void setId(DOMString t);
  boolean isSetId();
};

[Prefix="libsbml::"]
interface GeneralGlyph {
  DOMString getId();
  void setId(DOMString t);
  boolean isSetId();
};

[Prefix="libsbml::"]
interface LineSegment {
  DOMString getId();
  void setId(DOMString t);
  boolean isSetId();

  Point getStart();
  void setStart(Point p);

  Point getEnd();
  void setEnd(Point p);
};

[Prefix="libsbml::"]
interface CubicBezier {
  DOMString getId();
  void setId(DOMString t);
  boolean isSetId();

  Point getStart();
  void setStart(Point p);

  Point getEnd();
  void setEnd(Point p);

  Point getBasePoint1();
  void setBasePoint1(Point p);

  Point getBasePoint2();
  void setBasePoint2(Point p);
};

[Prefix="libsbml::"]
interface ReactionGlyph {
  DOMString getId();
  void setId(DOMString t);
  boolean isSetId();

  DOMString getReactionId();
  void setReactionId(DOMString t);
  boolean isSetReactionId();

  BoundingBox getBoundingBox();
  void setBoundingBox(BoundingBox b);

  unsigned long getNumSpeciesReferenceGlyphs();
  SpeciesReferenceGlyph getSpeciesReferenceGlyph(unsigned long n);
};

[Prefix="libsbml::"]
interface SpeciesGlyph {
  BoundingBox getBoundingBox();
  void setBoundingBox(BoundingBox b);

  DOMString getId();
  void setId(DOMString t);
  boolean isSetId();

  DOMString getSpeciesId();
  void setSpeciesId(DOMString t);
  boolean isSetSpeciesId();
};

[Prefix="libsbml::"]
interface Curve {
  CubicBezier createCubicBezier();
  LineSegment createLineSegment();

  unsigned long getNumCurveSegments();
  LineSegment getCurveSegment(unsigned long n);
};

[Prefix="libsbml::"]
interface SpeciesReferenceGlyph {
  DOMString getId();
  void setId(DOMString t);
  boolean isSetId();

  BoundingBox getBoundingBox();
  void setBoundingBox(BoundingBox b);

  CubicBezier createCubicBezier();
  LineSegment createLineSegment();

  Curve getCurve();
  boolean isSetCurve();
};

[Prefix="libsbml::"]
interface TextGlyph {
  BoundingBox getBoundingBox();
  void setBoundingBox(BoundingBox b);

  DOMString getText();
  void setText(DOMString t);
  boolean isSetText();
};

[Prefix="libsbml::"]
interface Layout {
  DOMString getId();
  void setId(DOMString t);
  boolean isSetId();

  Dimensions getDimensions();
  void setDimensions(Dimensions b);

  GraphicalObject createAdditionalGraphicalObject();
  CompartmentGlyph createCompartmentGlyph();
  CubicBezier createCubicBezier();
  GeneralGlyph createGeneralGlyph();
  LineSegment createLineSegment();
  ReactionGlyph createReactionGlyph();
  SpeciesGlyph createSpeciesGlyph();
  SpeciesReferenceGlyph createSpeciesReferenceGlyph();
  TextGlyph createTextGlyph();

  unsigned long getNumAdditionalGraphicalObjects();
  unsigned long getNumCompartmentGlyphs();
  unsigned long getNumGeneralGlyphs();
  unsigned long getNumReactionGlyphs();
  unsigned long getNumSpeciesGlyphs();
  unsigned long getNumTextGlyphs();

  GraphicalObject getAdditionalGraphicalObject(unsigned long n);
  CompartmentGlyph getCompartmentGlyph(unsigned long n);
  GeneralGlyph getGeneralGlyph(unsigned long n);
  ReactionGlyph getReactionGlyph(unsigned long n);
  SpeciesGlyph getSpeciesGlyph(unsigned long n);
  TextGlyph getTextGlyph(unsigned long n);

  GraphicalObject removeAdditionalGraphicalObject(unsigned long n);
  CompartmentGlyph removeCompartmentGlyph(unsigned long n);
  ReactionGlyph removeReactionGlyph(unsigned long n);
  SpeciesGlyph removeSpeciesGlyph(unsigned long n);
  SpeciesReferenceGlyph removeSpeciesReferenceGlyph(DOMString id);
  TextGlyph removeTextGlyph(unsigned long n);

  SBasePlugin getPlugin(DOMString name);
};

[Prefix="libsbml::"]
interface ListOfLayouts {
  SBasePlugin getPlugin(DOMString name);
};

[Prefix="libsbml::"]
interface LayoutModelPlugin {
  Layout createLayout();

  // NOTE: libSBML signedness is inconsistent here
  long getNumLayouts();
  Layout getLayout(unsigned long n);

  ListOfLayouts getListOfLayouts();
};

[Prefix="libsbml::"]
interface LayoutPkgNamespaces {
  void LayoutPkgNamespaces(unsigned long level, unsigned long version);
};

[Prefix="libsbmljs::"]
interface LayoutCaster {
  void LayoutCaster();
  LayoutModelPlugin castToLayoutPlugin(SBasePlugin p);
};

[Prefix="libsbml::"]
interface LayoutExtension {
};

[Prefix="libsbmljs::"]
interface LayoutExtensionWrapper {
  void LayoutExtensionWrapper();
  DOMString getXmlnsL2();
  DOMString getXmlnsL3V1V1();
};

[Prefix="libsbmljs::"]
interface CurveCaster {
  void CurveCaster();
  boolean isCubicBezier(LineSegment x);
  CubicBezier castToCubicBezier(LineSegment x);
};[Prefix="libsbml::"]
interface RelAbsVector {
  void RelAbsVector(double a, double r);

  void setCoordinate(double a, double r);

  void setAbsoluteValue(double abs);
  void setRelativeValue(double rel);

  double getAbsoluteValue();
  double getRelativeValue();
};

[Prefix="libsbml::"]
interface LocalStyle {
  DOMString getId();
  void setId(DOMString t);
  boolean isSetId();

  DOMString getName();
  long setName(DOMString name);

  unsigned long getNumIds();
  boolean isInIdList(DOMString id);
  void removeId(DOMString id);

  RenderGroup getGroup();
  void setGroup(RenderGroup g);

  unsigned long getNumRoles();
  DOMString createRoleString(); // NOTE: may leak (returns rvalue)
  DOMString createTypeString(); // NOTE: may leak (returns rvalue)

  void addRole(DOMString role);
  boolean isInRoleList(DOMString role);
  void removeRole(DOMString role);

  unsigned long getNumTypes();
  void addType(DOMString t);
  void isInTypeList(DOMString t);
  void removeType(DOMString t);
};

[Prefix="libsbml::"]
interface GlobalStyle {
  DOMString getId();
  void setId(DOMString t);
  boolean isSetId();

  DOMString getName();
  long setName(DOMString name);

  RenderGroup getGroup();
  void setGroup(RenderGroup g);

  unsigned long getNumRoles();
  DOMString createRoleString(); // NOTE: may leak (returns rvalue)
  DOMString createTypeString(); // NOTE: may leak (returns rvalue)

  void addRole(DOMString role);
  boolean isInRoleList(DOMString role);
  void removeRole(DOMString role);

  unsigned long getNumTypes();
  void addType(DOMString t);
  void isInTypeList(DOMString t);
  void removeType(DOMString t);
};

[Prefix="libsbml::"]
interface Text {
  void setX([Ref] RelAbsVector v);
  void setY([Ref] RelAbsVector v);
  void setZ([Ref] RelAbsVector v);

  [Ref] RelAbsVector getX();
  [Ref] RelAbsVector getY();
  [Ref] RelAbsVector getZ();

  DOMString getFontFamily();
  void setFontFamily(DOMString family);

  [Ref] RelAbsVector getFontSize();
  void setFontSize([Ref] RelAbsVector v);

  libsbml__idl__Text__idl__FONT_WEIGHT getFontWeight();
  void setFontWeight(libsbml__idl__Text__idl__FONT_WEIGHT weight);

  libsbml__idl__Text__idl__FONT_STYLE getFontStyle();
  void setFontStyle(libsbml__idl__Text__idl__FONT_STYLE style);

  libsbml__idl__Text__idl__TEXT_ANCHOR getTextAnchor();
  libsbml__idl__Text__idl__TEXT_ANCHOR getVTextAnchor();
  void setTextAnchor(libsbml__idl__Text__idl__TEXT_ANCHOR anchor);
  void setVTextAnchor(libsbml__idl__Text__idl__TEXT_ANCHOR anchor);
  boolean isSetTextAnchor();
  boolean isSetVTextAnchor();
};

[Prefix="libsbml::"]
interface RenderPoint {
  [Ref] RelAbsVector x();
  [Ref] RelAbsVector y();
  [Ref] RelAbsVector z();
  
  void setX([Ref] RelAbsVector v);
  void setY([Ref] RelAbsVector v);
  void setZ([Ref] RelAbsVector v);
  
  void setCoordinates([Ref] RelAbsVector x, [Ref] RelAbsVector y, [Ref] RelAbsVector z);
  
  void initDefaults();
  
  DOMString getElementName();
  boolean hasRequiredElements();
};

[Prefix="libsbml::"]
interface RenderCubicBezier {
  [Ref] RelAbsVector basePoint1_X();
  [Ref] RelAbsVector basePoint1_Y();
  [Ref] RelAbsVector basePoint1_Z();
  
  void setBasePoint1_X([Ref] RelAbsVector v);
  void setBasePoint1_Y([Ref] RelAbsVector v);
  void setBasePoint1_Z([Ref] RelAbsVector v);
  
  [Ref] RelAbsVector basePoint2_X();
  [Ref] RelAbsVector basePoint2_Y();
  [Ref] RelAbsVector basePoint2_Z();
  
  void setBasePoint2_X([Ref] RelAbsVector v);
  void setBasePoint2_Y([Ref] RelAbsVector v);
  void setBasePoint2_Z([Ref] RelAbsVector v);
  
  void setBasePoint1([Ref] RelAbsVector x, [Ref] RelAbsVector y, [Ref] RelAbsVector z);
  void setBasePoint2([Ref] RelAbsVector x, [Ref] RelAbsVector y, [Ref] RelAbsVector z);
  
  DOMString getElementName();
  long getTypeCode();
  boolean hasRequiredElements();
  boolean hasRequiredAttributes();
};

[Prefix="libsbmljs::"]
interface BezierCaster {
  void BezierCaster();

  boolean isBezier(RenderPoint p);
  RenderCubicBezier asBezier(RenderPoint p);
};

// NOTE: can't wrap due to use of double arrays
// TODO: write helpers
[Prefix="libsbml::"]
interface Transformation2D {
};

[Prefix="libsbml::"]
interface Image {
  void setCoordinates([Ref] RelAbsVector x, [Ref] RelAbsVector y, [Ref] RelAbsVector z);
  void setX([Ref] RelAbsVector x);
  void setY([Ref] RelAbsVector y);
  void setZ([Ref] RelAbsVector z);

  [Ref] RelAbsVector getX();
  [Ref] RelAbsVector getY();
  [Ref] RelAbsVector getZ();

  void setDimensions([Ref] RelAbsVector w, [Ref] RelAbsVector h);

  void setWidth([Ref] RelAbsVector w);
  void setHeight([Ref] RelAbsVector h);

  [Ref] RelAbsVector getWidth();
  [Ref] RelAbsVector getHeight();

  void setImageReference(DOMString ref);
  DOMString getImageReference();
  boolean isSetImageReference();

  long getTypeCode();
};

[Prefix="libsbml::"]
interface Rectangle {
  void setCoordinatesAndSize([Ref] RelAbsVector x, [Ref] RelAbsVector y, [Ref] RelAbsVector z, [Ref] RelAbsVector w, [Ref] RelAbsVector h);

  void setCoordinates([Ref] RelAbsVector x, [Ref] RelAbsVector y, [Ref] RelAbsVector z);

  void setSize([Ref] RelAbsVector w, [Ref] RelAbsVector h);

  void setWidth([Ref] RelAbsVector w);
  void setHeight([Ref] RelAbsVector h);

  void setRadii([Ref] RelAbsVector rx, [Ref] RelAbsVector ry);
  void setRadiusX([Ref] RelAbsVector rx);
  void setRadiusY([Ref] RelAbsVector ry);

  void setX([Ref] RelAbsVector x);
  void setY([Ref] RelAbsVector y);
  void setZ([Ref] RelAbsVector z);

  [Ref] RelAbsVector getX();
  [Ref] RelAbsVector getY();
  [Ref] RelAbsVector getZ();

  [Ref] RelAbsVector getWidth();
  [Ref] RelAbsVector getHeight();

  [Ref] RelAbsVector getRadiusX();
  [Ref] RelAbsVector getRadiusY();

  long getTypeCode();
};

[Prefix="libsbml::"]
interface Ellipse {
  [Ref] RelAbsVector getCX();
  [Ref] RelAbsVector getCY();
  [Ref] RelAbsVector getCZ();

  [Ref] RelAbsVector getRX();
  [Ref] RelAbsVector getRY();

  void setCX([Ref] RelAbsVector v);
  void setCY([Ref] RelAbsVector v);
  void setCZ([Ref] RelAbsVector v);

  void setRX([Ref] RelAbsVector v);
  void setRY([Ref] RelAbsVector v);

  void setCenter2D([Ref] RelAbsVector cx, [Ref] RelAbsVector cy);
  void setCenter3D([Ref] RelAbsVector cx, [Ref] RelAbsVector cy, [Ref] RelAbsVector cz);

  void setRadii([Ref] RelAbsVector rx, [Ref] RelAbsVector ry);

  long getTypeCode();
};

[Prefix="libsbml::"]
interface RenderCurve {
  DOMString getStartHead();
  DOMString getEndHead();

  boolean isSetStartHead();
  boolean isSetEndHead();

  unsigned long getNumElements();
  RenderPoint getElement(unsigned long n);
  RenderPoint removeElement(unsigned long n);

  RenderCubicBezier createCubicBezier();
  RenderPoint createPoint();
};

[Prefix="libsbml::"]
interface Polygon {
  unsigned long getNumElements();
  RenderPoint getElement(unsigned long n);
  
  RenderPoint createPoint();
  RenderCubicBezier createCubicBezier();
  DOMString getElementName();

  long getTypeCode();
};

[Prefix="libsbmljs::"]
interface PrimitiveCaster {
  void PrimitiveCaster();

  boolean isPolygon(Transformation2D p);
  Polygon asPolygon(Transformation2D p);

  boolean isImage(Transformation2D p);
  Image asImage(Transformation2D p);

  boolean isRectangle(Transformation2D p);
  Rectangle asRectangle(Transformation2D p);

  boolean isEllipse(Transformation2D p);
  Ellipse asEllipse(Transformation2D p);

  boolean isRenderCurve(Transformation2D p);
  RenderCurve asRenderCurve(Transformation2D p);

  boolean isText(Transformation2D p);
  Text asText(Transformation2D p);
};

enum libsbml__idl__Text__idl__FONT_WEIGHT {
  "libsbml::Text::WEIGHT_UNSET",
  "libsbml::Text::WEIGHT_NORMAL",
  "libsbml::Text::WEIGHT_BOLD"
};

enum libsbml__idl__Text__idl__FONT_STYLE {
  "libsbml::Text::STYLE_UNSET",
  "libsbml::Text::STYLE_NORMAL",
  "libsbml::Text::STYLE_ITALIC"
};

enum libsbml__idl__Text__idl__TEXT_ANCHOR {
  "libsbml::Text::ANCHOR_UNSET",
  "libsbml::Text::ANCHOR_START",
  "libsbml::Text::ANCHOR_MIDDLE",
  "libsbml::Text::ANCHOR_END",
  "libsbml::Text::ANCHOR_TOP",
  "libsbml::Text::ANCHOR_BOTTOM"
};

[Prefix="libsbml::"]
interface RenderGroup {
  DOMString getId();
  void setId(DOMString t);
  boolean isSetId();

  DOMString getFontFamily();
  void setFontFamily(DOMString family);

  [Ref] RelAbsVector getFontSize();
  void setFontSize([Ref] RelAbsVector v);

  libsbml__idl__Text__idl__FONT_WEIGHT getFontWeight();
  void setFontWeight(libsbml__idl__Text__idl__FONT_WEIGHT weight);

  libsbml__idl__Text__idl__FONT_STYLE getFontStyle();
  void setFontStyle(libsbml__idl__Text__idl__FONT_STYLE style);

  libsbml__idl__Text__idl__TEXT_ANCHOR getTextAnchor();
  libsbml__idl__Text__idl__TEXT_ANCHOR getVTextAnchor();
  void setTextAnchor(libsbml__idl__Text__idl__TEXT_ANCHOR anchor);
  void setVTextAnchor(libsbml__idl__Text__idl__TEXT_ANCHOR anchor);
  boolean isSetTextAnchor();
  boolean isSetVTextAnchor();

  DOMString getStartHead();
  DOMString getEndHead();

  unsigned long getNumElements();
  Transformation2D getElement(unsigned long n);

  DOMString getElementName();

  Image createImage();
  RenderGroup createGroup();
  Rectangle createRectangle();
  Ellipse createEllipse();
  RenderCurve createCurve();
  Polygon createPolygon();
  Text createText();

  long addChildElement(Transformation2D child);

  boolean isSetStartHead();
  boolean isSetEndHead();
  boolean isSetFontFamily();
  boolean isSetFontWeight();
  boolean isSetFontStyle();

  long getTypeCode();
};

[Prefix="libsbml::"]
interface LineEnding {
  DOMString getId();
  void setId(DOMString t);
  boolean isSetId();

  RenderGroup getGroup();
  void setGroup(RenderGroup g);

  boolean getIsEnabledRotationalMapping();
  void setEnableRotationalMapping(boolean enable);
  
  BoundingBox getBoundingBox();
  void setBoundingBox(BoundingBox b);
};

[Prefix="libsbml::"]
interface GradientStop {
  DOMString getId();
  void setId(DOMString t);
  boolean isSetId();

  [Ref] RelAbsVector getOffset();
  void setOffset(double abs, double rel);

  DOMString getStopColor();
  void setStopColor(DOMString color);
};

[Prefix="libsbml::"]
interface GradientBase {
  DOMString getId();
  void setId(DOMString t);
  boolean isSetId();

  unsigned long getNumGradientStops();
  GradientStop getGradientStop(unsigned long n);
  GradientStop createGradientStop();
};

[Prefix="libsbml::"]
interface LinearGradient {
  DOMString getId();
  void setId(DOMString t);
  boolean isSetId();

  void setCoordinates([Ref] RelAbsVector x1, [Ref] RelAbsVector y1, [Ref] RelAbsVector x2, [Ref] RelAbsVector y2);
  void setPoint1([Ref] RelAbsVector x, [Ref] RelAbsVector y, [Ref] RelAbsVector z);
  void setPoint2([Ref] RelAbsVector x, [Ref] RelAbsVector y, [Ref] RelAbsVector z);

  [Ref] RelAbsVector getXPoint1();
  [Ref] RelAbsVector getYPoint1();
  [Ref] RelAbsVector getZPoint1();

  [Ref] RelAbsVector getXPoint2();
  [Ref] RelAbsVector getYPoint2();
  [Ref] RelAbsVector getZPoint2();

  unsigned long getNumGradientStops();
  GradientStop getGradientStop(unsigned long n);
  GradientStop createGradientStop();
};

[Prefix="libsbml::"]
interface RadialGradient {
  DOMString getId();
  void setId(DOMString t);
  boolean isSetId();

  unsigned long getNumGradientStops();
  GradientStop getGradientStop(unsigned long n);
  GradientStop createGradientStop();
};

[Prefix="libsbmljs::"]
interface GradientCaster {
  void GradientCaster();

  boolean isLinear(GradientBase p);
  LinearGradient asLinear(GradientBase p);

  boolean isRadial(GradientBase p);
  RadialGradient asRadial(GradientBase p);
};

[Prefix="libsbml::"]
interface ColorDefinition {
  DOMString getId();
  void setId(DOMString t);
  boolean isSetId();

  DOMString createValueString(); // NOTE: may leak (returns rvalue)
  boolean setColorValue(DOMString val);
  void setRGBA(unsigned long r, unsigned long g, unsigned long b, unsigned long a);

  void setRed(unsigned long val);
  void setGreen(unsigned long val);
  void setBlue(unsigned long val);
  void setAlpha(unsigned long val);

  unsigned long getRed();
  unsigned long getGreen();
  unsigned long getBlue();
  unsigned long getAlpha();
};

[Prefix="libsbml::"]
interface GlobalRenderInformation {
  DOMString getId();
  void setId(DOMString t);
  boolean isSetId();

  DOMString getName();
  void setName(DOMString t);
  boolean isSetName();

  DOMString getProgramName();
  void setProgramName(DOMString name);

  DOMString getProgramVersion();
  void setProgramVersion(DOMString t);

  DOMString getBackgroundColor();
  void setBackgroundColor(DOMString t);

  unsigned long getNumColorDefinitions();
  ColorDefinition getColorDefinition(unsigned long n);
  ColorDefinition createColorDefinition();
  ColorDefinition removeColorDefinition(unsigned long n);

  unsigned long getNumGradientDefinitions();
  GradientBase getGradientDefinition(unsigned long n);
  LinearGradient createLinearGradientDefinition();
  RadialGradient createRadialGradientDefinition();
  GradientBase removeGradientDefinition(unsigned long n);

  unsigned long getNumLineEndings();
  LineEnding getLineEnding(unsigned long n);
  LineEnding createLineEnding();
  LineEnding removeLineEnding(unsigned long n);

  unsigned long getNumStyles();
  GlobalStyle getStyle(unsigned long n);
};

[Prefix="libsbml::"]
interface RenderListOfLayoutsPlugin {
  unsigned long getNumGlobalRenderInformationObjects();
  GlobalRenderInformation getRenderInformation(unsigned long n);
};

[Prefix="libsbml::"]
interface LocalRenderInformation {
  DOMString getId();
  void setId(DOMString t);
  boolean isSetId();

  DOMString getName();
  void setName(DOMString t);
  boolean isSetName();

  DOMString getProgramVersion();
  void setProgramVersion(DOMString t);

  DOMString getProgramName();
  void setProgramName(DOMString name);

  DOMString getBackgroundColor();
  void setBackgroundColor(DOMString t);

  unsigned long getNumColorDefinitions();
  ColorDefinition getColorDefinition(unsigned long n);
  ColorDefinition createColorDefinition();
  ColorDefinition removeColorDefinition(unsigned long n);

  unsigned long getNumGradientDefinitions();
  GradientBase getGradientDefinition(unsigned long n);
  LinearGradient createLinearGradientDefinition();
  RadialGradient createRadialGradientDefinition();
  GradientBase removeGradientDefinition(unsigned long n);

  unsigned long getNumLineEndings();
  LineEnding getLineEnding(unsigned long n);
  LineEnding createLineEnding();
  LineEnding removeLineEnding(unsigned long n);

  unsigned long getNumStyles();
  LocalStyle getStyle(unsigned long n);
};

[Prefix="libsbml::"]
interface RenderExtension {
};

[Prefix="libsbmljs::"]
interface RenderExtensionWrapper {
  void RenderExtensionWrapper();
  DOMString getXmlnsL2();
  DOMString getXmlnsL3V1V1();
};

[Prefix="libsbml::"]
interface RenderLayoutPlugin {
  unsigned long getNumLocalRenderInformationObjects();
  LocalRenderInformation getRenderInformation(unsigned long n);

  LocalRenderInformation createLocalRenderInformation();
  LocalRenderInformation removeLocalRenderInformation(unsigned long n);
};

[Prefix="libsbmljs::"]
interface RenderCaster {
  void RenderCaster();
  RenderListOfLayoutsPlugin castToRenderListOfLayoutsPlugin(SBasePlugin p);
  RenderLayoutPlugin castToRenderLayoutPlugin(SBasePlugin p);
};
